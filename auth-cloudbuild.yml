steps:
# Build the container image
- name: 'gcr.io/k8s-skaffold/pack'
  entrypoint: 'pack'
  args:
    - build
    - gcr.io/$PROJECT_ID/oos-auth:$SHORT_SHA
    - --cache-image=gcr.io/$PROJECT_ID/oos-auth:cache
    # TODO: after paketo-buildpacks/dotnet-core buildpack fix revert to using latest version
    # - --buildpack=gcr.io/paketo-buildpacks/dotnet-core
    - --buildpack=docker:///gcr.io/paketo-buildpacks/dotnet-core:0.16.1
    - --builder=paketobuildpacks/builder:base
    - --env=BP_DOTNET_PROJECT_PATH=./OutOfSchool/OutOfSchool.IdentityServer/
    - --publish
# Deploy container image to Cloud Run
- name: 'gcr.io/cloud-builders/gcloud'
  args:
    - beta
    - run
    - deploy
    - authservice
    - --image
    - gcr.io/$PROJECT_ID/oos-auth:$SHORT_SHA
    - --region
    - $_REGION
    - --platform
    - managed
    - --allow-unauthenticated
    - --service-account
    - $_SERVICE_ACCOUNT
    - --cpu=2
    - --memory=512Mi
    - --max-instances=2
    - --concurrency=80
    - --set-env-vars=ASPNETCORE_ENVIRONMENT=Google
    - --set-env-vars=Email__AddressFrom=$_SENDER_EMAIL
    - --set-env-vars=ConnectionStringsOverride__DefaultConnection__UserId=oos
    - --set-secrets=ConnectionStringsOverride__DefaultConnection__Password=$_DB_PASS,Email__SendGridKey=$_SENDGRID_KEY
    # Disable http2 because prod will be http1.1 for now
    - --no-use-http2
# Clean old versions except previous Cloud Run
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: bash
  args:
    - -c
    - for revision in `gcloud run revisions list --service authservice --platform managed --region $_REGION --format 'value(name)' | sort -r | tail -n +3 | paste -sd " " -`; do $(yes | gcloud run revisions delete --platform managed --region $_REGION $revision) || exit 0; done;
  ##### Update the tag #####
  # Access the SSH key from Secret Manager
  - name: gcr.io/cloud-builders/gcloud
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      cat <<EOF > /root/.ssh/id_github
      $$SSH
      EOF
    secretEnv: ['SSH']
    volumes:
    - name: 'ssh'
      path: /root/.ssh
  # Set up git with key and domain
  - name: 'gcr.io/cloud-builders/git'
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      chmod 600 /root/.ssh/id_github
      cat <<EOF >/root/.ssh/config
      Hostname github.com
      IdentityFile /root/.ssh/id_github
      EOF
      ssh-keyscan -t rsa github.com > /root/.ssh/known_hosts
    volumes:
    - name: 'ssh'
      path: /root/.ssh
  # Increment tag
  - name: gcr.io/cloud-builders/git
    entrypoint: 'bash'
    args:
    - '-c'
    - |
      git config --global user.name cloudbuild
      git config --global user.email oos@cloudbuild.gserviceaccount.com
      echo "Cloning repo"
      git clone --branch $BRANCH_NAME git@github.com:ita-social-projects/OoS-Backend.git
      cd OoS-Backend
      CURRENT_VERSION=`git describe --tags $$(git rev-list --tags --max-count=1) 2>/dev/null`
      if [[ $$CURRENT_VERSION == '' ]]
      then
        CURRENT_VERSION='gcp-0.0.0'
      fi
      echo "Current Version: $$CURRENT_VERSION"
      CURRENT_VERSION_PARTS=($${CURRENT_VERSION//./ })
      VNUM1=$${CURRENT_VERSION_PARTS[0]}
      VNUM2=$${CURRENT_VERSION_PARTS[1]}
      VNUM3=$${CURRENT_VERSION_PARTS[2]}
      VNUM3=$$((VNUM3+1))
      NEW_TAG="$$VNUM1.$$VNUM2.$$VNUM3"
      echo "Updating $$CURRENT_VERSION to $$NEW_TAG"
      GIT_COMMIT=`git rev-parse HEAD`
      NEEDS_TAG=`git describe --contains $$GIT_COMMIT 2>/dev/null`
      if [ -z "$$NEEDS_TAG" ]; then
        DESCRIPTION=`git log --cherry --pretty=format:'â–ª %s by %an' --max-count=1`
        git tag -a $$NEW_TAG -m "$$DESCRIPTION"
        echo "Tagged with $$NEW_TAG"
        git push --tags
      else
        echo "Already a tag on this commit"
      fi
    volumes:
    - name: 'ssh'
      path: /root/.ssh
availableSecrets:
  secretManager:
  - versionName: $_GITHUB_DEPLOY
    env: 'SSH'
