# Default values for database.
# This is a YAML-formatted file.

pvc:
  mysql:
    name: mysql-primary
    accessModes:
      - ReadWriteOnce
    size: 30Gi
    storageClass: openebs-hostpath
  redis:
    name: redis-master
    accessModes:
      - ReadWriteOnce
    size: 10Gi
    storageClass: openebs-hostpath

mysql:
  architecture: standalone
  rbac:
    create: true
  auth:
    database: outofschool
    username: "oos"
    replicationUser: replicator

    existingSecret: "mysql-auth"
    ## @param auth.forcePassword Force users to specify required passwords
    ##
    forcePassword: false
    usePasswordFiles: false
  initdbScripts:
    my_init_script.sh: |
      #!/bin/bash
      mysql -u root -p${MYSQL_ROOT_PASSWORD} <<EOF
      CREATE USER 'webapi'@'%' IDENTIFIED BY '${API_PASSWORD}';
      GRANT INSERT ON outofschool.* TO 'webapi'@'%';
      GRANT SELECT ON outofschool.* TO 'webapi'@'%';
      GRANT UPDATE ON outofschool.* TO 'webapi'@'%';
      GRANT DELETE ON outofschool.* TO 'webapi'@'%';
      FLUSH PRIVILEGES;
      EOF
  primary:
    persistence:
      enabled: true
      existingClaim: mysql-primary
      # storageClass: openebs-hostpath
      # size: 30Gi
    extraEnvVarsSecret: mysql-api-auth

redis:
  enabled: false
  architecture: standalone
  auth:
    enabled: true
    sentinel: true
    existingSecret: redis-auth
    existingSecretPasswordKey: password
    usePasswordFiles: false
  master:
    persistence:
      enabled: true
      existingClaim: redis-master
  # commonConfiguration: |-
  #   # Enable AOF https://redis.io/topics/persistence#append-only-file
  #   appendonly yes
  #   # Disable RDB persistence, AOF persistence already enabled.
  #   save ""

phpmyadmin:
  enabled: true
  ingress:
    enabled: false
    hostname: phpmyadmin.local
    pathType: ImplementationSpecific
    ## @param ingress.annotations Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
    ## For a full list of possible ingress annotations, please see
    ## ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/user-guide/nginx-configuration/annotations.md
    ## Use this parameter to set the required annotations for cert-manager, see
    ## ref: https://cert-manager.io/docs/usage/ingress/#supported-annotations
    ##
    ## e.g:
    ## annotations:
    ##   kubernetes.io/ingress.class: nginx
    ##   cert-manager.io/cluster-issuer: cluster-issuer-name
    ##
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    ## @param ingress.tls Enable TLS configuration for the hostname defined at `ingress.hostname` parameter
    ## TLS certificates will be retrieved from a TLS secret with name: {{- printf "%s-tls" .Values.ingress.hostname }}
    ## You can use the ingress.secrets parameter to create this TLS secret, relay on cert-manager to create it, or
    ## let the chart create self-signed certificates for you
    ##
    tls: false
    ## @param ingress.extraHosts The list of additional hostnames to be covered with this ingress record.
    ## Most likely the hostname above will be enough, but in the event more hosts are needed, this is an array
    ## Example:
    ## extraHosts:
    ##   - name: phpmyadmin.local
    ##     path: /
    ##
    extraHosts: []
    ## @param ingress.extraTls The tls configuration for additional hostnames to be covered with this ingress record.
    ## see: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
    ## Example:
    ## extraTls:
    ## - hosts:
    ##     - phpmyadmin.local
    ##   secretName: phpmyadmin.local-tls
    ##
    extraTls: []
    ## @param ingress.secrets If you're providing your own certificates, please use this to add the certificates as secrets
    ## key and certificate should start with -----BEGIN CERTIFICATE----- or -----BEGIN RSA PRIVATE KEY-----
    ## name should line up with a secretName set further up
    ##
    ## If it is not set and you're using cert-manager, this is unneeded, as it will create the secret for you
    ## If it is not set and you're NOT using cert-manager either, self-signed certificates will be created
    ## It is also possible to create and manage the certificates outside of this helm chart
    ## Please see README.md for more information
    ##
    ## Example
    ## secrets:
    ##   - name: phpmyadmin.local-tls
    ##     key: ""
    ##     certificate: ""
    ##
    secrets: []
  db:
    allowArbitraryServer: false
    host: "mysql"