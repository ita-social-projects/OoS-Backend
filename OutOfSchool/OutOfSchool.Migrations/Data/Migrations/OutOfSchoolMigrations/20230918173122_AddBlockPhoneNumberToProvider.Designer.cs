// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OutOfSchool.Services;

#nullable disable

namespace OutOfSchool.Migrations.Data.Migrations.OutOfSchoolMigrations
{
    [DbContext(typeof(OutOfSchoolDbContext))]
    [Migration("20230918173122_AddBlockPhoneNumberToProvider")]
    partial class AddBlockPhoneNumberToProvider
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AchievementChild", b =>
                {
                    b.Property<Guid>("AchievementsId")
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("ChildrenId")
                        .HasColumnType("binary(16)");

                    b.HasKey("AchievementsId", "ChildrenId");

                    b.HasIndex("ChildrenId");

                    b.ToTable("AchievementChild");
                });

            modelBuilder.Entity("ChildSocialGroup", b =>
                {
                    b.Property<Guid>("ChildrenId")
                        .HasColumnType("binary(16)");

                    b.Property<long>("SocialGroupsId")
                        .HasColumnType("bigint");

                    b.HasKey("ChildrenId", "SocialGroupsId");

                    b.HasIndex("SocialGroupsId");

                    b.ToTable("ChildSocialGroup");
                });

            modelBuilder.Entity("DirectionInstitutionHierarchy", b =>
                {
                    b.Property<long>("DirectionsId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("InstitutionHierarchiesId")
                        .HasColumnType("binary(16)");

                    b.HasKey("DirectionsId", "InstitutionHierarchiesId");

                    b.HasIndex("InstitutionHierarchiesId");

                    b.ToTable("DirectionInstitutionHierarchy");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("FriendlyName")
                        .HasColumnType("longtext");

                    b.Property<string>("Xml")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("DataProtectionKeys");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.Achievement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<DateTime>("AchievementDate")
                        .HasColumnType("date");

                    b.Property<long>("AchievementTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<Guid>("WorkshopId")
                        .HasColumnType("binary(16)");

                    b.HasKey("Id");

                    b.HasIndex("AchievementTypeId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("WorkshopId");

                    b.ToTable("Achievements");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.AchievementTeacher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<Guid>("AchievementId")
                        .HasColumnType("binary(16)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AchievementId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("AchievementTeachers");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.AchievementType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("TitleEn")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("AchievementTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsDeleted = false,
                            Title = "Переможці міжнародних та всеукраїнських спортивних змагань (індивідуальних та командних)",
                            TitleEn = "Winners of international and all-Ukrainian sports competitions (individual and team)"
                        },
                        new
                        {
                            Id = 2L,
                            IsDeleted = false,
                            Title = "Призери та учасники міжнародних, всеукраїнських та призери регіональних конкурсів і виставок наукових, технічних, дослідницьких, інноваційних, ІТ проектів",
                            TitleEn = "Winners and participants of international, all-Ukrainian and regional contests and exhibitions of scientific, technical, research, innovation, IT projects"
                        },
                        new
                        {
                            Id = 3L,
                            IsDeleted = false,
                            Title = "Реципієнти міжнародних грантів",
                            TitleEn = "Recipients of international grants"
                        },
                        new
                        {
                            Id = 4L,
                            IsDeleted = false,
                            Title = "Призери міжнародних культурних конкурсів та фестивалів",
                            TitleEn = "Winners of international cultural competitions and festivals"
                        },
                        new
                        {
                            Id = 5L,
                            IsDeleted = false,
                            Title = "Соціально активні категорії учнів",
                            TitleEn = "Socially active categories of students"
                        },
                        new
                        {
                            Id = 6L,
                            IsDeleted = false,
                            Title = "Цифрові інструменти Google для закладів вищої та фахової передвищої освіти",
                            TitleEn = "Google digital tools for institutions of higher and professional pre-higher education"
                        },
                        new
                        {
                            Id = 7L,
                            IsDeleted = false,
                            Title = "Переможці та учасники олімпіад міжнародного та всеукраїнського рівнів",
                            TitleEn = "Winners and participants of olympiads at the international and all-Ukrainian levels"
                        });
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("BuildingNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<long>("CATOTTGId")
                        .HasColumnType("bigint");

                    b.Property<ulong>("GeoHash")
                        .HasColumnType("bigint unsigned");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<double>("Latitude")
                        .HasColumnType("double");

                    b.Property<double>("Longitude")
                        .HasColumnType("double");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("CATOTTGId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<DateTimeOffset?>("ApprovedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ChildId")
                        .HasColumnType("binary(16)");

                    b.Property<DateTimeOffset>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<Guid>("ParentId")
                        .HasColumnType("binary(16)");

                    b.Property<string>("RejectionMessage")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<Guid>("WorkshopId")
                        .HasColumnType("binary(16)");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("ParentId");

                    b.HasIndex("WorkshopId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.AreaAdmin", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<long>("CATOTTGId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("binary(16)");

                    b.HasKey("UserId");

                    b.HasIndex("CATOTTGId");

                    b.HasIndex("InstitutionId");

                    b.ToTable("AreaAdmins");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.AverageRating", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("binary(16)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<float>("Rate")
                        .HasColumnType("float");

                    b.Property<int>("RateQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("AverageRatings");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.BlockedProviderParent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<DateTimeOffset>("DateTimeFrom")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset?>("DateTimeTo")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<Guid>("ParentId")
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("binary(16)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("UserIdBlock")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserIdUnblock")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("ParentId");

                    b.HasIndex("ProviderId");

                    b.ToTable("BlockedProviderParents");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.CATOTTG", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Category")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<ulong>("GeoHash")
                        .HasColumnType("bigint unsigned");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsTop")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("Latitude")
                        .HasColumnType("double");

                    b.Property<double>("Longitude")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("NeedCheck")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("ParentId");

                    b.ToTable("CATOTTGs");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.ChangesLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<Guid?>("EntityIdGuid")
                        .HasColumnType("binary(16)");

                    b.Property<long?>("EntityIdLong")
                        .HasColumnType("bigint");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("NewValue")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("OldValue")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ChangesLog");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.ChatWorkshop.ChatMessageWorkshop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("ChatRoomId")
                        .HasColumnType("binary(16)");

                    b.Property<DateTimeOffset>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset?>("ReadDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("SenderRoleIsProvider")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ChatRoomId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("ChatMessageWorkshops");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.ChatWorkshop.ChatRoomWorkshop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<Guid>("ParentId")
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("WorkshopId")
                        .HasColumnType("binary(16)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("ParentId");

                    b.HasIndex("WorkshopId");

                    b.ToTable("ChatRoomWorkshops");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.Child", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<DateTime?>("DateOfBirth")
                        .IsRequired()
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<int>("Gender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsParent")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("binary(16)");

                    b.Property<string>("PlaceOfStudy")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("ParentId");

                    b.ToTable("Children");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.CompanyInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("CompanyInformation");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.CompanyInformationItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<Guid>("CompanyInformationId")
                        .HasColumnType("binary(16)");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("SectionName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyInformationId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("CompanyInformationItems");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.DateTimeRange", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time(6)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time(6)");

                    b.Property<byte>("Workdays")
                        .HasColumnType("tinyint unsigned");

                    b.Property<Guid>("WorkshopId")
                        .HasColumnType("binary(16)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("WorkshopId");

                    b.ToTable("DateTimeRanges");

                    b.HasCheckConstraint("CK_DateTimeRanges_EndTimeIsAfterStartTime", "EndTime >= StartTime");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.Direction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Directions");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.ElasticsearchSyncRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<int>("Entity")
                        .HasColumnType("int");

                    b.Property<int>("Operation")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("OperationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("RecordId")
                        .HasColumnType("binary(16)");

                    b.HasKey("Id");

                    b.ToTable("ElasticsearchSyncRecords");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.Favorite", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("WorkshopId")
                        .HasColumnType("binary(16)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkshopId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.FileInDb", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ContentType")
                        .HasColumnType("longtext");

                    b.Property<byte[]>("Data")
                        .HasColumnType("longblob");

                    b.HasKey("Id");

                    b.ToTable("FilesInDb");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.Images.Image<OutOfSchool.Services.Models.Provider>", b =>
                {
                    b.Property<Guid>("EntityId")
                        .HasColumnType("binary(16)");

                    b.Property<string>("ExternalStorageId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("EntityId", "ExternalStorageId");

                    b.ToTable("ProviderImages");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.Images.Image<OutOfSchool.Services.Models.Workshop>", b =>
                {
                    b.Property<Guid>("EntityId")
                        .HasColumnType("binary(16)");

                    b.Property<string>("ExternalStorageId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("EntityId", "ExternalStorageId");

                    b.ToTable("WorkshopImages");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.InstitutionAdmin", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("binary(16)");

                    b.HasKey("UserId");

                    b.HasIndex("InstitutionId");

                    b.ToTable("InstitutionAdmins");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.InstitutionStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("InstitutionStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            IsDeleted = false,
                            Name = "Працює"
                        },
                        new
                        {
                            Id = 2L,
                            IsDeleted = false,
                            Name = "Перебуває в стані реорганізації"
                        },
                        new
                        {
                            Id = 3L,
                            IsDeleted = false,
                            Name = "Має намір на реорганізацію"
                        },
                        new
                        {
                            Id = 4L,
                            IsDeleted = false,
                            Name = "Відсутній"
                        });
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<int>("Action")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Data")
                        .HasColumnType("longtext");

                    b.Property<string>("GroupedData")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ObjectId")
                        .HasColumnType("binary(16)");

                    b.Property<DateTimeOffset?>("ReadDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.OperationWithObject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("EntityId")
                        .HasColumnType("binary(16)");

                    b.Property<int?>("EntityType")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("EventDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("OperationType")
                        .HasColumnType("int");

                    b.Property<string>("RowSeparator")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("EntityType");

                    b.HasIndex("OperationType");

                    b.HasIndex("RowSeparator");

                    b.ToTable("OperationsWithObjects");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.Parent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<DateTime?>("DateOfBirth")
                        .IsRequired()
                        .HasColumnType("date");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("UserId");

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.PermissionsForRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PackedPermissions")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("PermissionsForRoles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "techadmin permissions",
                            PackedPermissions = "def\n\r !()+432578>=<?HGIFPQ[]\\rpqon|z{yx}T",
                            RoleName = "TechAdmin"
                        },
                        new
                        {
                            Id = 2L,
                            Description = "provider permissions",
                            PackedPermissions = "e\n43256HGIFPQ[]\\T",
                            RoleName = "Provider"
                        },
                        new
                        {
                            Id = 3L,
                            Description = "parent permissions",
                            PackedPermissions = "e\n !()+>=<PQT",
                            RoleName = "Parent"
                        },
                        new
                        {
                            Id = 4L,
                            Description = "provider admin permissions",
                            PackedPermissions = "e\n26HGIFPQ[\\T",
                            RoleName = "ProviderAdmin"
                        },
                        new
                        {
                            Id = 5L,
                            Description = "ministry admin permissions",
                            PackedPermissions = "ef\n2578(PQFTn[zxy{}",
                            RoleName = "MinistryAdmin"
                        },
                        new
                        {
                            Id = 6L,
                            Description = "region admin permissions",
                            PackedPermissions = "ef\n2578(PQFTxy[",
                            RoleName = "RegionAdmin"
                        },
                        new
                        {
                            Id = 7L,
                            Description = "area admin permissions",
                            PackedPermissions = "ef\n2578(PQFT[",
                            RoleName = "AreaAdmin"
                        });
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.Provider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<long?>("ActualAddressId")
                        .HasColumnType("bigint");

                    b.Property<string>("BlockPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("BlockReason")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("CoverImageId")
                        .HasColumnType("longtext");

                    b.Property<string>("Director")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("DirectorDateOfBirth")
                        .IsRequired()
                        .HasColumnType("Date");

                    b.Property<string>("EdrpouIpn")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Facebook")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Founder")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("FullTitle")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(true)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("Instagram")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<Guid?>("InstitutionId")
                        .HasColumnType("binary(16)");

                    b.Property<long?>("InstitutionStatusId")
                        .HasColumnType("bigint");

                    b.Property<int>("InstitutionType")
                        .HasColumnType("int");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<long>("LegalAddressId")
                        .HasColumnType("bigint");

                    b.Property<string>("License")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("LicenseStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("Ownership")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("ShortTitle")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(true)
                        .HasColumnType("varchar(60)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(10);

                    b.Property<string>("StatusReason")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Website")
                        .HasMaxLength(256)
                        .IsUnicode(true)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ActualAddressId")
                        .IsUnique();

                    b.HasIndex("EdrpouIpn");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("InstitutionStatusId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("LegalAddressId")
                        .IsUnique();

                    b.HasIndex("TypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.ProviderAdmin", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("BlockingType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeputy")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("binary(16)");

                    b.HasKey("UserId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("ProviderId");

                    b.ToTable("ProviderAdmins");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.ProviderAdminChangesLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<Guid?>("ManagedWorkshopId")
                        .HasColumnType("binary(16)");

                    b.Property<DateTime>("OperationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("OperationType")
                        .HasColumnType("int");

                    b.Property<string>("ProviderAdminUserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("binary(16)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("ManagedWorkshopId");

                    b.HasIndex("ProviderAdminUserId");

                    b.HasIndex("ProviderId");

                    b.HasIndex("UserId");

                    b.ToTable("ProviderAdminChangesLog");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.ProviderSectionItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("binary(16)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("ProviderId");

                    b.ToTable("ProviderSectionItems");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.ProviderType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id");

                    b.ToTable("ProviderTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Дитячо-юнацькі спортивні школи: комплексні дитячо-юнацькі спортивні школи, дитячо-юнацькі спортивні школи з видів спорту, дитячо-юнацькі спортивні школи для осіб з інвалідністю, спеціалізовані дитячо-юнацькі школи олімпійського резерву, спеціалізовані дитячо-юнацькі спортивні школи для осіб з інвалідністю паралімпійського та дефлімпійського резерву"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Клуби: військово-патріотичного виховання, дитячо-юнацькі (моряків, річковиків, авіаторів, космонавтів, парашутистів, десантників, прикордонників, радистів, пожежників, автолюбителів, краєзнавців, туристів, етнографів, фольклористів, фізичної підготовки та інших напрямів)"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Мала академія мистецтв (народних ремесел)"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Мала академія наук учнівської молоді"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "Оздоровчі заклади для дітей та молоді: дитячо-юнацькі табори (містечка, комплекси): оздоровчі, заміські, профільні, праці та відпочинку, санаторного типу, з денним перебуванням; туристські бази"
                        },
                        new
                        {
                            Id = 6L,
                            Name = "Мистецькі школи: музична, художня, хореографічна, хорова, школа мистецтв тощо"
                        },
                        new
                        {
                            Id = 7L,
                            Name = "Центр, палац, будинок, клуб художньої творчості дітей, юнацтва та молоді, художньо-естетичної творчості учнівської молоді, дитячої та юнацької творчості, естетичного виховання"
                        },
                        new
                        {
                            Id = 8L,
                            Name = "Центр, будинок, клуб еколого-натуралістичної творчості учнівської молоді, станція юних натуралістів"
                        },
                        new
                        {
                            Id = 9L,
                            Name = "Центр, будинок, клуб науково-технічної творчості учнівської молоді, станція юних техніків"
                        },
                        new
                        {
                            Id = 10L,
                            Name = "Центр, будинок, клуб, бюро туризму, краєзнавства, спорту та екскурсій учнівської молоді, туристсько-краєзнавчої творчості учнівської молоді, станція юних туристів"
                        },
                        new
                        {
                            Id = 11L,
                            Name = "Центри: військово-патріотичного та інших напрямів позашкільної освіти"
                        },
                        new
                        {
                            Id = 12L,
                            Name = "Дитяча бібліотека, дитяча флотилія моряків і річковиків, дитячий парк, дитячий стадіон, дитячо-юнацька картинна галерея, дитячо-юнацька студія (хорова, театральна, музична, фольклорна тощо), кімната школяра, курси, студії, школи мистецтв, освітньо-культурні центри національних меншин"
                        },
                        new
                        {
                            Id = 13L,
                            Name = "Інше"
                        });
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.QuartzJob", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset>("LastSuccessLaunch")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("QuartzJobs");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.Rating", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("binary(16)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<Guid>("ParentId")
                        .HasColumnType("binary(16)");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("ParentId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.RegionAdmin", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<long>("CATOTTGId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("binary(16)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.HasKey("UserId");

                    b.HasIndex("CATOTTGId");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("RegionAdmins");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.SocialGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NameEn")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("SocialGroups");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Діти із багатодітних сімей",
                            NameEn = "Children from large families"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Діти із малозабезпечених сімей",
                            NameEn = "Children from low-income families"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Діти з інвалідністю",
                            NameEn = "Children with disabilities"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Діти-сироти",
                            NameEn = "Orphans"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "Діти, позбавлені батьківського піклування",
                            NameEn = "Children deprived of parental care"
                        });
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.StatisticReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ExternalStorageId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ReportDataType")
                        .HasColumnType("int");

                    b.Property<int>("ReportType")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.HasKey("Id");

                    b.ToTable("StatisticReports");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.StatisticReportCSV", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ApplicationsAmount")
                        .HasColumnType("int");

                    b.Property<int>("ApplicationsApproved")
                        .HasColumnType("int");

                    b.Property<string>("CATOTTGCategory")
                        .HasColumnType("longtext");

                    b.Property<string>("CATOTTGCode")
                        .HasColumnType("longtext");

                    b.Property<int>("ChildrenStudying")
                        .HasColumnType("int");

                    b.Property<int>("ChildrenStudyingAchievementsInstitutionHierarchy")
                        .HasColumnType("int");

                    b.Property<int>("ChildrenStudyingDisabilityInstitutionHierarchy")
                        .HasColumnType("int");

                    b.Property<int>("ChildrenStudyingFemale")
                        .HasColumnType("int");

                    b.Property<int>("ChildrenStudyingFemaleInstitutionHierarchy")
                        .HasColumnType("int");

                    b.Property<int>("ChildrenStudyingInstitutionHierarchy")
                        .HasColumnType("int");

                    b.Property<int>("ChildrenStudyingLargeFamilyInstitutionHierarchy")
                        .HasColumnType("int");

                    b.Property<int>("ChildrenStudyingLess18")
                        .HasColumnType("int");

                    b.Property<int>("ChildrenStudyingOrphanInstitutionHierarchy")
                        .HasColumnType("int");

                    b.Property<int>("ChildrenStudyingPoorFamilyInstitutionHierarchy")
                        .HasColumnType("int");

                    b.Property<string>("Complex")
                        .HasColumnType("longtext");

                    b.Property<string>("EDRPOU")
                        .HasColumnType("longtext");

                    b.Property<string>("InstitutionTitle")
                        .HasColumnType("longtext");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("binary(16)");

                    b.Property<string>("ProviderName")
                        .HasColumnType("longtext");

                    b.Property<string>("ProviderType")
                        .HasColumnType("longtext");

                    b.Property<string>("Region")
                        .HasColumnType("longtext");

                    b.Property<string>("Settlement")
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .HasColumnType("longtext");

                    b.Property<int>("Teachers")
                        .HasColumnType("int");

                    b.Property<int>("TeachersFrom31To40InstitutionHierarchy")
                        .HasColumnType("int");

                    b.Property<int>("TeachersFrom41To50InstitutionHierarchy")
                        .HasColumnType("int");

                    b.Property<int>("TeachersFrom51To55InstitutionHierarchy")
                        .HasColumnType("int");

                    b.Property<int>("TeachersFrom55InstitutionHierarchy")
                        .HasColumnType("int");

                    b.Property<int>("TeachersInstitutionHierarchy")
                        .HasColumnType("int");

                    b.Property<int>("TeachersLess30InstitutionHierarchy")
                        .HasColumnType("int");

                    b.Property<string>("TerritorialCommunity")
                        .HasColumnType("longtext");

                    b.Property<int>("WorkshopsAmount")
                        .HasColumnType("int");

                    b.Property<int>("WorkshopsAmountInstitutionHierarchy")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StatisticReportsCSV");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.SubordinationStructure.Institution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsGovernment")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("NumberOfHierarchyLevels")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Institutions");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.SubordinationStructure.InstitutionFieldDescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<int>("HierarchyLevel")
                        .HasColumnType("int");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("binary(16)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("InstitutionFieldDescriptions");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.SubordinationStructure.InstitutionHierarchy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<int>("HierarchyLevel")
                        .HasColumnType("int");

                    b.Property<Guid>("InstitutionId")
                        .HasColumnType("binary(16)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("binary(16)");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("InstitutionId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("ParentId");

                    b.ToTable("InstitutionHierarchies");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<string>("CoverImageId")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<Guid>("WorkshopId")
                        .HasColumnType("binary(16)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("WorkshopId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreatingTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDerived")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRegistered")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset>("LastLogin")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<bool>("MustChangePassword")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(84)
                        .IsUnicode(false)
                        .HasColumnType("char(84)")
                        .IsFixedLength();

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .IsFixedLength(false);

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .IsFixedLength(false);

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.Workshop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<long>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<uint>("AvailableSeats")
                        .HasColumnType("int unsigned");

                    b.Property<bool>("CompetitiveSelection")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("CompetitiveSelectionDescription")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("CoverImageId")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("DisabilityOptionsDesc")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Facebook")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Instagram")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<Guid?>("InstitutionHierarchyId")
                        .HasColumnType("binary(16)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("Keywords")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("MaxAge")
                        .HasColumnType("int");

                    b.Property<int>("MinAge")
                        .HasColumnType("int");

                    b.Property<int>("PayRate")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("binary(16)");

                    b.Property<int>("ProviderOwnership")
                        .HasColumnType("int");

                    b.Property<string>("ProviderTitle")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("Website")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("WithDisabilityOptions")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("InstitutionHierarchyId");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("ProviderId");

                    b.ToTable("Workshops");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.WorkshopDescriptionItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("binary(16)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<Guid>("WorkshopId")
                        .HasColumnType("binary(16)");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("WorkshopId");

                    b.ToTable("WorkshopDescriptionItems");
                });

            modelBuilder.Entity("ProviderAdminWorkshop", b =>
                {
                    b.Property<Guid>("ManagedWorkshopsId")
                        .HasColumnType("binary(16)");

                    b.Property<string>("ProviderAdminsUserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("ManagedWorkshopsId", "ProviderAdminsUserId");

                    b.HasIndex("ProviderAdminsUserId");

                    b.ToTable("ProviderAdminWorkshop");
                });

            modelBuilder.Entity("AchievementChild", b =>
                {
                    b.HasOne("OutOfSchool.Services.Models.Achievement", null)
                        .WithMany()
                        .HasForeignKey("AchievementsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OutOfSchool.Services.Models.Child", null)
                        .WithMany()
                        .HasForeignKey("ChildrenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChildSocialGroup", b =>
                {
                    b.HasOne("OutOfSchool.Services.Models.Child", null)
                        .WithMany()
                        .HasForeignKey("ChildrenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OutOfSchool.Services.Models.SocialGroup", null)
                        .WithMany()
                        .HasForeignKey("SocialGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DirectionInstitutionHierarchy", b =>
                {
                    b.HasOne("OutOfSchool.Services.Models.Direction", null)
                        .WithMany()
                        .HasForeignKey("DirectionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OutOfSchool.Services.Models.SubordinationStructure.InstitutionHierarchy", null)
                        .WithMany()
                        .HasForeignKey("InstitutionHierarchiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OutOfSchool.Services.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OutOfSchool.Services.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OutOfSchool.Services.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OutOfSchool.Services.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.Achievement", b =>
                {
                    b.HasOne("OutOfSchool.Services.Models.AchievementType", "AchievementType")
                        .WithMany()
                        .HasForeignKey("AchievementTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OutOfSchool.Services.Models.Workshop", "Workshop")
                        .WithMany()
                        .HasForeignKey("WorkshopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AchievementType");

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.AchievementTeacher", b =>
                {
                    b.HasOne("OutOfSchool.Services.Models.Achievement", "Achievement")
                        .WithMany("Teachers")
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievement");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.Address", b =>
                {
                    b.HasOne("OutOfSchool.Services.Models.CATOTTG", "CATOTTG")
                        .WithMany()
                        .HasForeignKey("CATOTTGId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CATOTTG");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.Application", b =>
                {
                    b.HasOne("OutOfSchool.Services.Models.Child", "Child")
                        .WithMany()
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OutOfSchool.Services.Models.Parent", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OutOfSchool.Services.Models.Workshop", "Workshop")
                        .WithMany("Applications")
                        .HasForeignKey("WorkshopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Parent");

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.AreaAdmin", b =>
                {
                    b.HasOne("OutOfSchool.Services.Models.CATOTTG", "CATOTTG")
                        .WithMany()
                        .HasForeignKey("CATOTTGId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OutOfSchool.Services.Models.SubordinationStructure.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OutOfSchool.Services.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CATOTTG");

                    b.Navigation("Institution");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.BlockedProviderParent", b =>
                {
                    b.HasOne("OutOfSchool.Services.Models.Parent", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OutOfSchool.Services.Models.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.CATOTTG", b =>
                {
                    b.HasOne("OutOfSchool.Services.Models.CATOTTG", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.ChangesLog", b =>
                {
                    b.HasOne("OutOfSchool.Services.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.ChatWorkshop.ChatMessageWorkshop", b =>
                {
                    b.HasOne("OutOfSchool.Services.Models.ChatWorkshop.ChatRoomWorkshop", "ChatRoom")
                        .WithMany("ChatMessages")
                        .HasForeignKey("ChatRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatRoom");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.ChatWorkshop.ChatRoomWorkshop", b =>
                {
                    b.HasOne("OutOfSchool.Services.Models.Parent", "Parent")
                        .WithMany("ChatRooms")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OutOfSchool.Services.Models.Workshop", "Workshop")
                        .WithMany("ChatRooms")
                        .HasForeignKey("WorkshopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.Child", b =>
                {
                    b.HasOne("OutOfSchool.Services.Models.Parent", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.CompanyInformationItem", b =>
                {
                    b.HasOne("OutOfSchool.Services.Models.CompanyInformation", "CompanyInformation")
                        .WithMany("CompanyInformationItems")
                        .HasForeignKey("CompanyInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyInformation");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.DateTimeRange", b =>
                {
                    b.HasOne("OutOfSchool.Services.Models.Workshop", null)
                        .WithMany("DateTimeRanges")
                        .HasForeignKey("WorkshopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.Favorite", b =>
                {
                    b.HasOne("OutOfSchool.Services.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OutOfSchool.Services.Models.Workshop", "Workshop")
                        .WithMany()
                        .HasForeignKey("WorkshopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.Images.Image<OutOfSchool.Services.Models.Provider>", b =>
                {
                    b.HasOne("OutOfSchool.Services.Models.Provider", "Entity")
                        .WithMany("Images")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.Images.Image<OutOfSchool.Services.Models.Workshop>", b =>
                {
                    b.HasOne("OutOfSchool.Services.Models.Workshop", "Entity")
                        .WithMany("Images")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.InstitutionAdmin", b =>
                {
                    b.HasOne("OutOfSchool.Services.Models.SubordinationStructure.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OutOfSchool.Services.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Institution");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.Parent", b =>
                {
                    b.HasOne("OutOfSchool.Services.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.Provider", b =>
                {
                    b.HasOne("OutOfSchool.Services.Models.Address", "ActualAddress")
                        .WithOne()
                        .HasForeignKey("OutOfSchool.Services.Models.Provider", "ActualAddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OutOfSchool.Services.Models.SubordinationStructure.Institution", "Institution")
                        .WithMany("RelatedProviders")
                        .HasForeignKey("InstitutionId");

                    b.HasOne("OutOfSchool.Services.Models.InstitutionStatus", "InstitutionStatus")
                        .WithMany("Providers")
                        .HasForeignKey("InstitutionStatusId");

                    b.HasOne("OutOfSchool.Services.Models.Address", "LegalAddress")
                        .WithOne()
                        .HasForeignKey("OutOfSchool.Services.Models.Provider", "LegalAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OutOfSchool.Services.Models.ProviderType", "Type")
                        .WithMany("Providers")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OutOfSchool.Services.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActualAddress");

                    b.Navigation("Institution");

                    b.Navigation("InstitutionStatus");

                    b.Navigation("LegalAddress");

                    b.Navigation("Type");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.ProviderAdmin", b =>
                {
                    b.HasOne("OutOfSchool.Services.Models.Provider", "Provider")
                        .WithMany("ProviderAdmins")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.ProviderAdminChangesLog", b =>
                {
                    b.HasOne("OutOfSchool.Services.Models.Workshop", "ManagedWorkshop")
                        .WithMany()
                        .HasForeignKey("ManagedWorkshopId");

                    b.HasOne("OutOfSchool.Services.Models.User", "ProviderAdminUser")
                        .WithMany()
                        .HasForeignKey("ProviderAdminUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OutOfSchool.Services.Models.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OutOfSchool.Services.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ManagedWorkshop");

                    b.Navigation("Provider");

                    b.Navigation("ProviderAdminUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.ProviderSectionItem", b =>
                {
                    b.HasOne("OutOfSchool.Services.Models.Provider", "Provider")
                        .WithMany("ProviderSectionItems")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.Rating", b =>
                {
                    b.HasOne("OutOfSchool.Services.Models.Parent", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.RegionAdmin", b =>
                {
                    b.HasOne("OutOfSchool.Services.Models.CATOTTG", "CATOTTG")
                        .WithMany()
                        .HasForeignKey("CATOTTGId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OutOfSchool.Services.Models.SubordinationStructure.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OutOfSchool.Services.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CATOTTG");

                    b.Navigation("Institution");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.SubordinationStructure.InstitutionFieldDescription", b =>
                {
                    b.HasOne("OutOfSchool.Services.Models.SubordinationStructure.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.SubordinationStructure.InstitutionHierarchy", b =>
                {
                    b.HasOne("OutOfSchool.Services.Models.SubordinationStructure.Institution", "Institution")
                        .WithMany()
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OutOfSchool.Services.Models.SubordinationStructure.InstitutionHierarchy", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Institution");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.Teacher", b =>
                {
                    b.HasOne("OutOfSchool.Services.Models.Workshop", "Workshop")
                        .WithMany("Teachers")
                        .HasForeignKey("WorkshopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.Workshop", b =>
                {
                    b.HasOne("OutOfSchool.Services.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OutOfSchool.Services.Models.SubordinationStructure.InstitutionHierarchy", "InstitutionHierarchy")
                        .WithMany()
                        .HasForeignKey("InstitutionHierarchyId");

                    b.HasOne("OutOfSchool.Services.Models.Provider", "Provider")
                        .WithMany("Workshops")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("InstitutionHierarchy");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.WorkshopDescriptionItem", b =>
                {
                    b.HasOne("OutOfSchool.Services.Models.Workshop", "Workshop")
                        .WithMany("WorkshopDescriptionItems")
                        .HasForeignKey("WorkshopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("ProviderAdminWorkshop", b =>
                {
                    b.HasOne("OutOfSchool.Services.Models.Workshop", null)
                        .WithMany()
                        .HasForeignKey("ManagedWorkshopsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OutOfSchool.Services.Models.ProviderAdmin", null)
                        .WithMany()
                        .HasForeignKey("ProviderAdminsUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.Achievement", b =>
                {
                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.ChatWorkshop.ChatRoomWorkshop", b =>
                {
                    b.Navigation("ChatMessages");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.CompanyInformation", b =>
                {
                    b.Navigation("CompanyInformationItems");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.InstitutionStatus", b =>
                {
                    b.Navigation("Providers");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.Parent", b =>
                {
                    b.Navigation("ChatRooms");

                    b.Navigation("Children");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.Provider", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("ProviderAdmins");

                    b.Navigation("ProviderSectionItems");

                    b.Navigation("Workshops");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.ProviderType", b =>
                {
                    b.Navigation("Providers");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.SubordinationStructure.Institution", b =>
                {
                    b.Navigation("RelatedProviders");
                });

            modelBuilder.Entity("OutOfSchool.Services.Models.Workshop", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("ChatRooms");

                    b.Navigation("DateTimeRanges");

                    b.Navigation("Images");

                    b.Navigation("Teachers");

                    b.Navigation("WorkshopDescriptionItems");
                });
#pragma warning restore 612, 618
        }
    }
}
